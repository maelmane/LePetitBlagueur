/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package crosemont.dti.g55.lepetitblagueur

import kotlin.test.Test
import kotlin.test.assertEquals

import java.util.Scanner
import java.io.PrintStream

import org.mockito.Mock
import org.mockito.Mockito
import org.mockito.junit.MockitoJUnitRunner
import org.junit.runner.RunWith
import kotlin.test.assertNotEquals

@RunWith(MockitoJUnitRunner::class)
class CLITest {

		// Bouchon de l'entrée
		@Mock
		lateinit var scan : Scanner

		// Mock de sortie
		@Mock
		lateinit var sortie : PrintStream


		
		@Test
		fun `étant donné une question rouge-bleu, lorsqu'on saisit «bleu«, on obtient la réponse «bleu«`() {

			Mockito.`when`( scan.nextLine() ).thenReturn( "bleu" )

			var cobaye = CLI( scan )

			var réponse = cobaye.questionner("test", arrayOf<String>("rouge", "bleu"))
			assertEquals( "bleu", réponse )
		}



		@Test
		fun `étant donné un message d'une ligne, lorsqu'on le fait afficher, on obtient le message suivi d'un retour de chariot`(){

			// Mise en place
			var cobaye = CLI( scan, sortie )

			// Action
			cobaye.afficher("test")

			// Vérification
			Mockito.verify( sortie ).println("test")

		}


	@Test
	fun `étant donné une question Stéphanie-Sophie-Monique, lorsqu'on écrit «so», on obtient «Sophie»`(){

		//Mise en place
		Mockito.`when`( scan.nextLine() ).thenReturn( "so" )
		var cobaye = CLI( scan )

		//Action
		var réponse = cobaye.questionner("test", arrayOf("Sophie", "Stéphanie", "Monique"))

		//Vérification
		assertEquals( "Sophie", réponse )
	}

	@Test
	fun `étant donné une question Stéphanie-Sophie-Monique, lorsqu'on saisit «s», on obtient le message "«s» n'est pas une réponse comprise"`(){
		//Mise en place
		Mockito.`when`( scan.nextLine() )
			.thenReturn( "s" )
			.thenReturn("Sophie")

		var cobaye = CLI( scan, sortie )

		//Action
		cobaye.questionner("test", arrayOf("Sophie", "Stéphanie", "Monique"))

		//Vérification
		Mockito.verify( sortie ).println("«s» n'est pas une réponse comprise.")
	}

	@Test
	fun `étant donné une question Stéphanie-Sophie-Monique, lorsqu'on saisit «SO» en majuscule, on obtient «Sophie»`(){
		//Mise en place
		Mockito.`when`( scan.nextLine() ).thenReturn( "SO" )
		var cobaye = CLI( scan )

		//Action
		var réponse = cobaye.questionner("test", arrayOf("Sophie", "Stéphanie", "Monique"))

		//Vérification
		assertEquals( "Sophie", réponse )
	}

	@Test
	fun `étant donné une question oui-non, lorsqu'on saisit «ouioui», on obtien le message "«ouioui» n'est pas une réponse comprise"`(){
		Mockito.`when`( scan.nextLine() )
			.thenReturn( "ouioui" )
			.thenReturn("o")

		var cobaye = CLI( scan, sortie  )

		//Action
		cobaye.questionner("test", arrayOf("oui", "non"))


		//Vérification
		Mockito.verify( sortie ).println("«ouioui» n'est pas une réponse comprise.")
	}

}
