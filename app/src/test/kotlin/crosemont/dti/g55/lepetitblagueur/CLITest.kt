/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package crosemont.dti.g55.lepetitblagueur

import kotlin.test.Test
import kotlin.test.assertEquals

import java.util.Scanner
import java.io.PrintStream

import org.mockito.Mock
import org.mockito.Mockito
import org.mockito.junit.MockitoJUnitRunner
import org.junit.runner.RunWith

@RunWith(MockitoJUnitRunner::class)
class CLITest {

		// Bouchon de l'entrée
		@Mock
		lateinit var scan : Scanner

		// Mock de sortie
		@Mock
		lateinit var sortie : PrintStream

		@Test
		fun `étant donné une question rouge-bleu, lorsqu'on saisit «rouge», on obtient la réponse «rouge»`() {

			// Mise en place
			// Prévoit l'entrée à saisir
			Mockito.`when`( scan.nextLine() ).thenReturn( "rouge" )
			var cobaye = CLI( scan )

			// Action
			var réponse = cobaye.questionner("test", arrayOf<String>("rouge", "bleu"))

			// Vérification
			assertEquals( "rouge", réponse )
		}
		
		@Test
		fun `étant donné une question rouge-bleu, lorsqu'on saisit «bleu«, on obtient la réponse «bleu«`() {

			Mockito.`when`( scan.nextLine() ).thenReturn( "bleu" )

			var cobaye = CLI( scan )

			var réponse = cobaye.questionner("test", arrayOf<String>("rouge", "bleu"))
			assertEquals( "bleu", réponse )
		}

		@Test
		fun `étant donné une question rouge-bleu, lorsqu'on saisit «jaune» puis «rouge», on obtient «rouge»`() {

			Mockito.`when`( scan.nextLine() )
			.thenReturn("jaune")
			.thenReturn( "rouge" )

			var cobaye = CLI( scan )

			var réponse = cobaye.questionner("test", arrayOf<String>("rouge", "bleu"))
			assertEquals( "rouge", réponse )
		}

		@Test
		fun `étant donné un message d'une ligne, lorsqu'on le fait afficher, on obtient le message suivi d'un retour de chariot`(){

			// Mise en place
			var cobaye = CLI( scan, sortie )

			// Action
			cobaye.afficher("test")

			// Vérification
			Mockito.verify( sortie ).println("test")

		}
		
}
